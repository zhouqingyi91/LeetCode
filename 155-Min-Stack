# Question url: https://leetcode.com/problems/min-stack/description/


# Push x into stack with current minimum,
# which yields O(1) time when calling the getMin function.
class MinStack(object):

    def __init__(self):
        self.stack = []

    def push(self, x):
        curMin = self.getMin()
        if curMin is None or x < curMin:
            curMin = x
        self.stack.append((x, curMin))

    def pop(self):
        self.stack.pop() if self.stack else None

    def top(self):
        if self.stack:
            return self.stack[-1][0]

    def getMin(self):
        if self.stack:
            return self.stack[-1][1]


'''
# my 1st solution with O(n) time
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        self.stack.append(x)

    def pop(self):
        """
        :rtype: void
        """
        if self.stack:
            self.stack.pop()

    def top(self):
        """
        :rtype: int
        """
        if self.stack:
            return self.stack[len(self.stack) - 1]

    def getMin(self):
        """
        :rtype: int
        """
        if self.stack:
            return min(self.stack)
'''

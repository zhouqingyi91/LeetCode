'''
Given an integer array nums, find the sum of the elements
between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.
'''


# look at other's solution and got the idea of computing the accumulated
# sums of nums from 0 to len(nums), and store them in a list (or dict)
# then return list[j + 1] - list[i] for the answer
class NumArray:

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.lst = [0]

        for num in nums:
            self.lst.append(self.lst[-1] + num)

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """

        return self.lst[j + 1] - self.lst[i]


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)


'''
# 1st solution, time limit exceeded, but not sure why because my
# solution is O(N) time
class NumArray:

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        ans = sum(self.nums[x] for x in range(i, j + 1))
        return ans
'''

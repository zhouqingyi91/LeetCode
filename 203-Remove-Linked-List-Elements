# Question url:
# https://leetcode.com/problems/remove-linked-list-elements/description/


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None


class Solution_recursive:
    def removeElements(self, head, val):
        if head is None:
            return None
        head.next = self.removeElements(head.next, val)
        return head.next if head.val == val else head


class Solution_iterative:
    def removeElements(self, head, val):
        while head and head.val == val:
            head = head.next
        node = head
        while node and node.next:
            if node.next.val == val:
                node.next = node.next.next
            else:
                node = node.next
        return head


class Solution_initial_solution:
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        node = head
        while node and node.val == val:
            head = head.next
            node = head
        temp = node
        while node and node.next:
            node = node.next
            if node.val == val:
                continue
            else:
                temp.next = node
                temp = temp.next
        if temp:
            temp.next = None
        return head

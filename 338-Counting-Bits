'''
Given a non negative integer number num. For
every numbers i in the range 0 ≤ i ≤ num calculate
the number of 1's in their binary representation
and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run
time O(n*sizeof(integer)). But can you do it in
linear time O(n) /possibly in a single pass?

Space complexity should be O(n).

Can you do it like a boss? Do it without using any
builtin function like __builtin_popcount in c++
or in any other language.
'''


# 2nd solution, after looking at hints
class Solution:
    def countBits(self, num):
        lst = [0]
        multiple = 1

        for i in range(1, num + 1):
            if i // multiple == 1:
                lst.append(1 + lst[i - multiple])
            else:
                multiple *= 2
                lst.append(1)

        return lst


'''
# 1st solution
class Solution:
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        lst = []

        for i in range(num + 1):
            x = bin(i)
            count = 0

            for j in x:
                if j == '1':
                    count += 1

            lst.append(count)

        return lst
'''

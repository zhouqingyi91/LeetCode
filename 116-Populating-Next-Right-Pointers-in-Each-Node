# Question url:
# https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/

# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None


class Solution_iterative_space_O(1):
    def connect(self, root):
        prev = root
        while prev:
            cur = prev
            while cur and cur.left:
                cur.left.next = cur.right
                if cur.next:
                    cur.right.next = cur.next.left
                cur = cur.next
            prev = prev.left


class Solution_revised_initial_recursion:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        if root and root.left:
            root.left.next = root.right
            if root.next:
                root.right.next = root.next.left
            self.connect(root.left)
            self.connect(root.right)


class Solution_initial_recursion:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        if root is None:
            return
        root.next = None

        def dfs(root):
            if root is None:
                return
            if root.left:
                root.left.next = root.right
                if root.next:
                    root.right.next = root.next.left
                else:
                    root.right.next = None
            dfs(root.left)
            dfs(root.right)

        dfs(root)

# Question url:
# https://leetcode.com/problems/product-of-array-except-self/description/


# a brilliant solution from other
# TC: O(N), SC: O(N)
class Solution(object):
    def productExceptSelf(self, nums):
        forward = 1
        ans = []
        for i in range(len(nums)):
            ans.append(forward)
            forward *= nums[i]

        backward = 1

        for i in range(len(ans) - 1, -1, -1):
            ans[i] *= backward
            backward *= nums[i]

        return ans


'''
# violates the restriction of 'without division'
# TC: O(N)
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        total = 1
        zero = False
        count = 0
        for x in nums:
            if x == 0:
                count += 1
                zero = True
                if count == 1:
                    continue
            total *= x

        for i in range(len(nums)):
            if zero:
                if nums[i] == 0:
                    nums[i] = total
                else:
                    nums[i] = 0
            else:
                nums[i] = total / nums[i]

        return nums
'''

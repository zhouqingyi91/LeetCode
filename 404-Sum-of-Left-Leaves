# Question url:
# https://leetcode.com/problems/sum-of-left-leaves/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution_iterative:
    def sumOfLeftLeaves(self, root):
        stack = [root]
        ans = 0
        while stack:
            node = stack.pop()
            if node:
                if node.left and node.left.left is None and node.left.right is None:
                    ans += node.left.val
                stack.extend([node.left, node.right])
        return ans


class Solution_recursion_without_parameter:
    def sumOfLeftLeaves(self, root):
        if not root:
            return 0
        if root.left and not root.left.left and not root.left.right:
            return root.left.val + self.sumOfLeftLeaves(root.right)
        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)


class Solution_recursion_with_parameter:
    def sumOfLeftLeaves(self, root):
        if root is None:
            return 0
        ans = 0
        if root.left and root.left.left is None and root.left.right is None:
            ans += root.left.val
        else:
            ans += self.sumOfLeftLeaves(root.left)
        ans += self.sumOfLeftLeaves(root.right)

        return ans


class Solution_recursion_with_def_parameter:
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.total = 0

        def dfs(root):
            if root:
                if root.left and root.left.left is None and root.left.right is None:
                    self.total += root.left.val
                dfs(root.left)
                dfs(root.right)
        dfs(root)
        return self.total

# Question url:
# https://leetcode.com/problems/subtree-of-another-tree/description/


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


# a recursive solution converting each tree to string
# then check if string t is s substring of string s
class Solution:
    def isSubtree(self, s, t):
        strings = self.convert(s)
        stringt = self.convert(t)
        return stringt in strings

    def convert(self, tree):
        if tree:
            return '#' + str(tree.val) + self.convert(tree.left) + self.convert(tree.right)
        else:
            return '$'


'''
# an iterative solution converting each tree to string
# then check if string t is s substring of string s
class Solution:
    def isSubtree(self, s, t):

        def convert(tree):
            stack = [tree]
            string = ''
            while stack:
                node = stack.pop()
                if node:
                    string += '#' + str(node.val)
                    stack.extend((node.left, node.right))
                else:
                    string += '$'
            return string

        strings = convert(s)
        stringt = convert(t)

        return stringt in strings
'''


'''
# a neat recursive solution, TC: O(m*n)
class Solution(object):
    def isSubtree(self, s, t):

        def isIdentical(s, t):
            if s and t:
                if s.val == t.val:
                    return isIdentical(s.left, t.left) and isIdentical(s.right, t.right)
            else:
                return s == t

        if isIdentical(s, t):
            return True

        if s is None:
            return False  # a root of None can't contain a subtree

        return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
'''


'''
# initial iterative solution, runtime: 455ms, TC: O(m*n)
class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        from collections import deque
        queuet = deque([t])
        tlst = []
        queues = deque([s])

        while queuet:
            nodet = queuet.popleft()

            if nodet:
                tlst.append(nodet.val)
                queuet.append(nodet.left)
                queuet.append(nodet.right)
            else:
                tlst.append(None)

        while queues:
            nodes = queues.popleft()
            queuei = deque([nodes])

            for i, x in enumerate(tlst):
                nodei = queuei.popleft()
                if nodei:
                    if nodei.val != x:
                        break
                    else:
                        queuei.append(nodei.left)
                        queuei.append(nodei.right)
                else:
                    if nodei != x:
                        break
                    else:
                        if i == len(tlst) - 1:
                            return True
                        continue

            if nodes:
                queues.append(nodes.left)
                queues.append(nodes.right)

        return False
'''


# test case: [3,3,5,1,2,4,null,null,null,null,null,1,2]

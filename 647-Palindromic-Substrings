# Question url:
# https://leetcode.com/problems/palindromic-substrings/description/


# anohter way to write the 2nd solution
class Solution():
    def countSubstrings(self, s):
        N = len(s) * 2 - 1  # number of centers a string has
        count = 0
        for center in range(N):
            left = center // 2
            right = left + center % 2
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
                count += 1
        return count


'''
# 2nd solution based on the idea: 'expand from center'
# it either expand from a single letter as in self.centerAt(s, i, i)
# or expand from two consecutive letters as in self.centerAt(s, i, i + 1)
class Solution(object):
    def countSubstrings(self, s):
        self.count = 0
        for i in range(len(s)):
            self.centerAt(s, i, i)
            self.centerAt(s, i, i + 1)
        return self.count

    def centerAt(self, S, L, R):
        while L >= 0 and R < len(S) and S[L] == S[R]:
            L -= 1
            R += 1
            self.count += 1
        return self.count
'''

'''
# initial solution, TC: O(N^2)
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        count = 0
        for i in range(len(s)):
            for _i in range(i + 1, len(s) + 1):
                if s[i: _i] == s[i: _i][::-1]:
                    count += 1

        return count
'''

string = ''
for i in range(1000):
    string += 'a'

print(Solution().countSubstrings(string))

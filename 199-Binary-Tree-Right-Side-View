# Question url:
# https://leetcode.com/problems/binary-tree-right-side-view/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution_iteration:
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        ans = []
        row = [root]
        while any(row):
            ans.append(row[-1].val)
            row = [kid for node in row for kid in (node.left, node.right) if kid]

        return ans


class Solution_recursion:
    def rightSideView(self, root):
        ans = []

        def dfs(root, depth):
            if root is None:
                return None
            if len(ans) == depth:
                ans.append(root.val)
            dfs(root.right, depth + 1)
            dfs(root.left, depth + 1)

        dfs(root, 0)
        return ans

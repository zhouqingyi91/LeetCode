# Question url:
# https://leetcode.com/problems/minimum-depth-of-binary-tree/description/


# revised recursive solution
class Solution_Recursion:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root is None:
            return 0

        left = self.minDepth(root.left)
        right = self.minDepth(root.right)

        if root.left is None or root.right is None:
            return max(left, right) + 1
        else:
            return min(left, right) + 1


# initial recursive solution
class Solution:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.ans = float('inf')

        def helper(root, depth):
            if root:
                if not root.left and not root.right:
                    self.ans = min(self.ans, depth)
                return helper(root.left, depth + 1) or helper(root.right, depth + 1)

        if not root:
            return 0
        helper(root, 1)
        return self.ans

# Question url:
# https://leetcode.com/problems/validate-binary-search-tree/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution_iterative_compare_prev_with_curr:
    def isValidBST(self, root):
        node, stack = root, []
        prev = None
        while stack or node:
            while node:
                stack.append(node)
                node = node.left
            node = stack.pop()
            if prev and prev.val >= node.val:
                return False
            prev = node
            node = node.right
        return True


# use a variable to store previous node
# do inorder traversal and compare previous node value
# with current node value
class Solution_recursive_prev:
    def isValidBST(self, root):
        self.prev = None
        return self.helper(root)

    def helper(self, root):
        if root is None:
            return True
        if not self.helper(root.left):
            return False
        if self.prev and self.prev.val >= root.val:
            return False
        self.prev = root
        return self.helper(root.right)


class Solution_recursive_with_leftbound_and_rightbound:
    def isValidBST(self, root):
        return self.helper(root, None, None)

    def helper(self, root, leftbound, rightbound):
        if root is None:
            return True
        if (leftbound and leftbound.val >= root.val or
                rightbound and rightbound.val <= root.val):
            return False

        return (self.helper(root.left, leftbound, root) and
                self.helper(root.right, root, rightbound))


class Solution_recursive_using_inorder_comparison:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        inorder = self.inorder(root)
        return inorder == list(sorted(set(inorder)))

    def inorder(self, root):
        if root is None:
            return []
        return self.inorder(root.left) + [root.val] + self.inorder(root.right)

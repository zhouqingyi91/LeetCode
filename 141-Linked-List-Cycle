'''
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?
'''

# Definition for singly-linked list.


class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

# fast-slow pointer solution. got this idea from others' solution


class Solution(object):
    def hasCycle(self, head):
        slow = fast = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True

        return False


'''
# my solution using O(1) space, but it modifies the original list
class Solution(object):
    def hasCycle(self, head):
        dummy = ListNode(None)

        while head:
            next = head.next
            head.next = dummy
            if next == dummy:
                return True
            head = next

        return False
'''

'''
# my solution using O(n) space
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        d = {}

        while head:
            d[head] = d.get(head, 0) + 1
            if d[head] > 1:
                return True
            else:
                head = head.next

        return False
'''

'''
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array),
some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear
in this array.

Could you do it without extra space and in O(n) runtime? You
may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
'''
# someone else's solution, without using extra space
# an unique idea


class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        lst = []

        for i in range(len(nums)):
            index = abs(nums[i]) - 1
            nums[index] = - abs(nums[index])

        for i in range(len(nums)):
            if nums[i] > 0:
                lst.append(i + 1)

        return lst


'''
# my solution, which uses extra space
class Solution:
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        d = {}
        lst = []

        for i, x in enumerate(nums):
            d[x] = d.get(x, 0) + 1

        for i in range(1, len(nums) + 1):
            try:
                d[i]
            except:
                lst.append(i)

        return lst
'''

ls = [4, 3, 2, 7, 8, 2, 3, 1]
print(Solution.findDisappearedNumbers(0, ls))

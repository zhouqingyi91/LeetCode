# Question url:
# https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/


# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution_iterative_dfs:
    def flatten(self, root):
        stack = [root]
        while stack:
            node = stack.pop()
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
            if stack:
                node.right = stack[-1]
                node.left = None


class Solution_morris_traversal:
    def flatten(self, root):
        node = root
        while node:
            if node.left:
                pred = node.left
                while pred.right:
                    pred = pred.right
                pred.right = node.right
                node.right = node.left
                node.left = None
            node = node.right


class Solution_reverse_preorder_traversal:
    def flatten(self, root):
        self.helper(root, None)

    def helper(self, root, prev):
        if root is None:
            return prev
        prev = self.helper(root.right, prev)
        prev = self.helper(root.left, prev)
        root.right = prev
        root.left = None
        prev = root
        return prev


class Solution_inorder_traversal:
    def flatten(self, root):
        if root is None:
            return
        self.prev = root
        self.flatten(root.left)

        dummy = root.right
        root.right = root.left
        root.left = None
        self.prev.right = dummy

        self.flatten(dummy)


class Solution_initial_2_passes:
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        if root is None:
            return
        preorder = []

        def dfs(root):
            if root:
                dfs(root.right)
                dfs(root.left)
                preorder.append(root.val)

        dfs(root)
        node = root
        preorder.pop()
        while preorder:
            value = preorder.pop()
            node.right = TreeNode(value)
            node.left = None
            node = node.right

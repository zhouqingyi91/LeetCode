# Question url:
# https://leetcode.com/problems/add-and-search-word-data-structure-design/description/


import collections


class TrieNode():
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False


class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        node = self.root
        for c in word:
            node = node.children[c]
        node.isWord = True

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        return self.dfs(word, self.root)

    def dfs(self, word, node):
        if not word:
            return node.isWord
        if word[0] == '.':
            for child in node.children.values():
                if self.dfs(word[1:], child):
                    return True
            return False
        elif word[0] not in node.children:
            return False
        return self.dfs(word[1:], node.children[word[0]])


'''
import collections


class WordDictionary():
    def __init__(self):
        self.root = collections.defaultdict(list)

    def addWord(self, word):
        if word:
            self.root[len(word)].append(word)

    def search(self, word):
        if not word:
            return False
        if '.' not in word:
            return word in self.root[len(word)]
        for c in self.root[len(word)]:
            for i, ch in enumerate(word):
                if ch != c[i] and ch != '.':
                    break
            else:
                return True
        return False
'''


'''
import collections


class TrieNode():
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False


class WordDictionary():
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word):
        node = self.root
        for c in word:
            node = node.children[c]
        node.isWord = True

    def search(self, word):
        self.res = False
        self.dfs(self.root, word)
        return self.res

    def dfs(self, node, word):
        if not word:
            if node.isWord:
                self.res = True
            return
        if word[0] == '.':
            for n in node.children.values():
                self.dfs(n, word[1:])
        else:
            node = node.children.get(word[0])
            if not node:
                return
            self.dfs(node, word[1:])
'''


'''
class TrieNode():
    def __init__(self):
        self.children = {}
        self.isWord = False


class WordDictionary():
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word):
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
        node.isWord = True

    def search(self, word):
        return self.searchFrom(self.root, word)

    def searchFrom(self, node, word):
        for i in range(len(word)):
            c = word[i]
            if c == '.':
                for k in node.children.values():
                    if self.searchFrom(k, word[i + 1:]):
                        return True
                return False
            elif c not in node.children:
                return False
            node = node.children[c]
        return node.isWord
'''


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

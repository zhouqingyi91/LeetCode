# Question url:
# https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution_recursive_without_reversing:
    def levelOrderBottom(self, root):
        ans = []

        def dfs(root, depth):
            if root:
                if len(ans) == depth:
                    ans.insert(0, [])
                ans[-(depth + 1)].append(root.val)
                dfs(root.left, depth + 1)
                dfs(root.right, depth + 1)

        dfs(root, 0)
        return ans


class Solution_recursive_with_reversing:
    def levelOrderBottom(self, root):
        ans = []

        def dfs(root, depth):
            if root:
                if len(ans) == depth:
                    ans.append([])
                ans[depth].append(root.val)
                dfs(root.left, depth + 1)
                dfs(root.right, depth + 1)

        dfs(root, 0)
        return ans[::-1]


class Solution_iterative_without_reversing:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        ans = []
        row = [root]
        while any(row):
            ans = [[node.val for node in row]] + ans
            row = [kid for node in row for kid in (node.left, node.right) if kid]
        return ans


class Solution_iterative:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        ans = []
        row = [root]
        while any(row):
            ans.append([node.val for node in row])
            row = [kid for node in row for kid in (node.left, node.right) if kid]
        return ans[::-1]

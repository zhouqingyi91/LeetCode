# Question url:
# https://leetcode.com/problems/binary-tree-paths/description/


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution_BFS:
    def binaryTreePaths(self, root):
        from collections import deque
        queue, res = deque([(root, "")]), []
        if root:
            while queue:
                node, s = queue.popleft()
                if not node.left and not node.right:
                    res.append(s + str(node.val))
                if node.left:
                    queue.append((node.left, s + str(node.val) + '->'))
                if node.right:
                    queue.append((node.right, s + str(node.val) + '->'))
        return res


# basically just like the DFS recursion solution
class Solution_DFS:
    def binaryTreePaths(self, root):
        res = []
        if root:
            stack = [(root, "")]
            while stack:
                node, s = stack.pop()
                if node.left is None and node.right is None:
                    res.append(s + str(node.val))
                if node.left:
                    stack.append((node.left, s + str(node.val) + '->'))
                if node.right:
                    stack.append((node.right, s + str(node.val) + '->'))

        return res


# Learned:
# 1) we can build up a parameter as we walk down the tree with recursion
# (I used to think that with recursion we build up parameter backward)
class Solution_DFS_recursion:
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        lst = []

        def path(root, string):
            if root.left is None and root.right is None:
                lst.append(string + str(root.val))
            if root.left:
                path(root.left, string + str(root.val) + '->')
            if root.right:
                path(root.right, string + str(root.val) + '->')

        if root:
            path(root, "")

        return lst

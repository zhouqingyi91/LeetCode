# Question url: https://leetcode.com/problems/convert-bst-to-greater-tree/description/


class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


# recursive without modifying the original tree
class Solution():

    total = 0

    def convertBST(self, root):
        if root is None:
            return None
        right = self.convertBST(root.right)
        self.total += node.val
        new_tree = TreeNode(self.total)
        new_tree.right = right
        new_tree.left = self.convertBST(root.left)

        return new_tree


'''
# recursive without modifying the original tree
class Solution():
    def convertBST(self, root):
        
        def greater_tree(node):
            if node is None:
                return None
            right = greater_tree(node.right)
            self.total += node.val
            new_tree = TreeNode(self.total)
            new_tree.right = right
            new_tree.left = greater_tree(node.left)

            return new_tree

        self.total = 0
        return greater_tree(root)
'''

'''
# recursive
class Solution(object):

    total = 0

    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if root:
            self.convertBST(root.right)
            self.total += root.val
            root.val = self.total
            self.convertBST(root.left)

        return root
'''


'''
# iterative
class Solution():
    def convertBST(self, root):
        stack = []
        node = root
        total = 0

        while stack or node:
            while node:
                stack.append(node)
                node = node.right
            node = stack.pop()
            total += node.val
            node.val = total
            node = node.left

        return root
'''

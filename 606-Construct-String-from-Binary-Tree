# Question url:
# https://leetcode.com/problems/construct-string-from-binary-tree/description/


class Solution_revised_recursion:
    def tree2str(self, root):
        """
        :type t: TreeNode
        :rtype: str
        """
        if root is None:
            return ""
        elif root.left is None and root.right is None:
            return str(root.val)
        elif root.right is None:
            return str(root.val) + '(' + self.tree2str(root.left) + ')'
        else:
            return str(root.val) + '(' + self.tree2str(root.left) + ')(' + self.tree2str(root.right) + ')'


# initial solution considering all the 4 possible conditions
class Solution_recursion:
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """

        def dfs(root):
            if root is None:
                return ""
            elif root.left is None and root.right is None:
                return str(root.val)
            elif root.left and root.right:
                return str(root.val) + '(' + dfs(root.left) + ')' + '(' + dfs(root.right) + ')'
            elif root.right:
                return str(root.val) + '()' + '(' + dfs(root.right) + ')'
            else:
                return str(root.val) + '(' + dfs(root.left) + ')'

        string = dfs(t)
        return string

'''
Say you have an array for which the ith element is the price
of a given stock on day i.

If you were only permitted to complete at most one transaction
(ie, buy one and sell one share of the stock), design an algorithm
to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5
max. difference = 6-1 = 5 (not 7-1 = 6, as selling price
needs to be larger than buying price)

Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0
In this case, no transaction is done, i.e. max profit = 0.
'''

# my solution with runtime 83ms


class Solution:
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        min_price = None  # or min_price = float('inf'). Learned from other's solution
        max_profit = 0

        for i in prices:
            if min_price is None:
                min_price = i
            min_price = min(i, min_price)
            max_profit = max(i - min_price, max_profit)

        return max_profit


ls = [7, 1, 5, 3, 6, 4]
print(Solution.maxProfit(0, ls))

low = float('inf')
x = 6
y = min(low, x)
print(y)

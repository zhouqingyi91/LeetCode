Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

# a neater solution from others
class Solution:
    def maxSubArray(self, A):
        if not A:
            return 0

        curSum = maxSum = A[0]
        for num in A[1:]:
            curSum = max(num, curSum + num)
            maxSum = max(maxSum, curSum)

        return maxSum


'''
# my accepted solution with runtime = 77ms (beats 64%)
class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        maxsum = None

        for x in nums:
            if maxsum is None:
                maxsum = x
            elif x > maxsum:
                maxsum = x

        if maxsum < 0:
            return maxsum
        else:
            y = 0
            maxsum = 0

        for x in nums:
            if y + x > 0:
                y += x
            else:
                y = 0

            if y > maxsum:
                maxsum = y

        return maxsum


ls1 = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # ans = 6
ls2 = [-1, -2]
ls3 = [1]
print(maxSubArray(ls2))
'''

# Question url:
# https://leetcode.com/problems/recover-binary-search-tree/description/

# Definition for a binary tree node.


class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution_iterative_space_N:
    def recoverTree(self, root):
        pre = first = second = None
        stack = []
        while root or stack:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            if pre and pre.val >= root.val:
                if first is None:
                    first = pre
                second = root
            pre, root = root, root.right

        if first and second:
            first.val, second.val = second.val, first.val


class Solution_recursive_space_N:
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        self.first = self.second = None
        self.pre = TreeNode(float('-inf'))
        self.inorder(root)
        self.first.val, self.second.val = self.second.val, self.first.val

    def inorder(self, root):
        if root is None:
            return None
        self.inorder(root.left)

        if self.first is None and self.pre.val >= root.val:
            self.first = self.pre
        if self.first and self.pre.val >= root.val:
            self.second = root
        self.pre = root

        self.inorder(root.right)
